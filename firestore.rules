rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Check if user is the owner of a document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Get user data
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if user is admin
    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }
    
    // Check if user is vendor
    function isVendor() {
      return isSignedIn() && getUserData().role == 'vendor';
    }
    
    // Check if user is customer
    function isCustomer() {
      return isSignedIn() && getUserData().role == 'customer';
    }
    
    // Check if vendor is verified
    function isVerifiedVendor() {
      return isVendor() && getUserData().verified == true;
    }
    
    // Check if user owns the vendor account
    function isVendorOwner(vendorId) {
      return isSignedIn() && request.auth.uid == vendorId;
    }
    
    // Validate email format
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    // ============================================
    // USERS COLLECTION
    // ============================================
    match /users/{userId} {
      // Anyone can create their own user document during signup
      allow create: if isSignedIn() && 
                      request.auth.uid == userId &&
                      request.resource.data.keys().hasAll(['email', 'role', 'createdAt']) &&
                      request.resource.data.role in ['customer', 'vendor'] &&
                      isValidEmail(request.resource.data.email);
      
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Anyone can read vendor profiles (for storefront pages)
      allow read: if resource.data.role == 'vendor' && resource.data.verified == true;
      
      // Users can update their own data (except role and verified status)
      allow update: if isOwner(userId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'verified', 'uid']);
      
      // Only admins can update role and verified status
      allow update: if isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // ============================================
    // VENDORS COLLECTION
    // ============================================
    match /vendors/{vendorId} {
      // Vendors can create their own store
      allow create: if isVendor() && 
                      request.auth.uid == vendorId &&
                      request.resource.data.keys().hasAll(['storeName', 'ownerId', 'verified', 'createdAt']) &&
                      request.resource.data.ownerId == request.auth.uid &&
                      request.resource.data.verified == false;
      
      // Anyone can read vendor info (for public store pages)
      allow read: if true;
      
      // Vendors can update their own store info (except verified and commission)
      allow update: if isVendorOwner(vendorId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['verified', 'commission', 'ownerId']);
      
      // Admins can update verification status and commission rates
      allow update: if isAdmin();
      
      // Only admins can delete vendor stores
      allow delete: if isAdmin();
    }
    
    // ============================================
    // PRODUCTS COLLECTION
    // ============================================
    match /products/{productId} {
      // Verified vendors can create products
      allow create: if isVerifiedVendor() &&
                      request.resource.data.vendorId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['name', 'price', 'stock', 'vendorId', 'status', 'createdAt']) &&
                      request.resource.data.price > 0 &&
                      request.resource.data.stock >= 0;
      
      // Public can read active/approved products
      allow read: if resource.data.status in ['active', 'approved'];
      
      // Vendors can read their own products (any status)
      allow read: if isSignedIn() && isVendorOwner(resource.data.vendorId);
      
      // Admins can read all products
      allow read: if isSignedIn() && isAdmin();
      
      // Any authenticated user can read active products (for browsing)
      allow read: if isSignedIn() && resource.data.status in ['active', 'approved'];
      
      // Vendors can update their own products (except approved status)
      allow update: if isVendorOwner(resource.data.vendorId) &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['approved', 'vendorId', 'featured']);
      
      // Admins can approve/reject products and feature them
      allow update: if isAdmin();
      
      // Vendors can delete their own products
      allow delete: if isVendorOwner(resource.data.vendorId);
      
      // Admins can delete any product
      allow delete: if isAdmin();
    }
    
    // ============================================
    // ORDERS COLLECTION
    // ============================================
    match /orders/{orderId} {
      // Customers can create orders
      allow create: if isSignedIn() &&
                      (request.resource.data.customerId == request.auth.uid || request.resource.data.userId == request.auth.uid) &&
                      request.resource.data.keys().hasAll(['items', 'total', 'status', 'createdAt']) &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.total > 0;
      
      // Customers can read their own orders
      allow read: if isSignedIn() && (resource.data.customerId == request.auth.uid || resource.data.userId == request.auth.uid);
      
      // Vendors can read orders containing their products
      allow read: if isVerifiedVendor() && 
                    request.auth.uid in resource.data.vendorIds;
      
      // Admins can read all orders
      allow read: if isAdmin();
      
      // Allow payment verification updates (from pending to paid)
      // TEMPORARY: Allow updates for payment verification from server
      // This allows the API route to update order status after payment
      allow update: if true;
      
      // Customers can cancel their own orders (only if pending or paid, not shipped yet)
      allow update: if isSignedIn() && 
                      (resource.data.customerId == request.auth.uid || resource.data.userId == request.auth.uid) &&
                      resource.data.status in ['pending', 'paid'] &&
                      request.resource.data.status == 'cancelled' &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['total', 'items', 'userId', 'customerId']);
      
      // Vendors can update order status for their items (but NOT cancelled orders)
      // Physical products: paid -> processing -> shipped -> delivered
      // Digital products: paid -> delivered
      // Services: paid -> processing -> delivered
      allow update: if isVerifiedVendor() && 
                      request.auth.uid in resource.data.vendorIds &&
                      resource.data.status != 'cancelled' &&
                      resource.data.status in ['paid', 'processing', 'shipped'] &&
                      request.resource.data.status in ['processing', 'shipped', 'delivered'] &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['total', 'items', 'userId', 'customerId', 'vendorIds']);
      
      // Admins can update any order
      allow update: if isAdmin();
      
      // Only admins can delete orders
      allow delete: if isAdmin();
    }
    
    // ============================================
    // REVIEWS COLLECTION
    // ============================================
    match /reviews/{reviewId} {
      // Customers can create reviews (only for products they purchased)
      allow create: if isCustomer() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['productId', 'userId', 'rating', 'createdAt']) &&
                      request.resource.data.rating >= 1 &&
                      request.resource.data.rating <= 5;
      
      // Everyone can read approved reviews
      allow read: if resource.data.approved == true;
      
      // Users can read their own reviews (any status)
      allow read: if isOwner(resource.data.userId);
      
      // Vendors can read reviews for their products
      allow read: if isVerifiedVendor();
      
      // Admins can read all reviews
      allow read: if isAdmin();
      
      // Users can update their own reviews
      allow update: if isOwner(resource.data.userId) &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['approved', 'userId', 'productId']);
      
      // Admins can approve/reject reviews
      allow update: if isAdmin();
      
      // Users can delete their own reviews
      allow delete: if isOwner(resource.data.userId);
      
      // Admins can delete any review
      allow delete: if isAdmin();
    }
    
    // ============================================
    // ADVERTISEMENTS COLLECTION
    // ============================================
    match /ads/{adId} {
      // Verified vendors can create ad campaigns
      allow create: if isVerifiedVendor() &&
                      request.resource.data.vendorId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['vendorId', 'type', 'budget', 'status', 'createdAt']) &&
                      request.resource.data.budget > 0 &&
                      request.resource.data.status == 'pending';
      
      // Everyone can read active/approved ads
      allow read: if resource.data.status == 'active' && resource.data.approved == true;
      
      // Vendors can read their own ads
      allow read: if isVendorOwner(resource.data.vendorId);
      
      // Admins can read all ads
      allow read: if isAdmin();
      
      // Vendors can update their own ads (except approved status and impressions/clicks)
      allow update: if isVendorOwner(resource.data.vendorId) &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['approved', 'impressions', 'clicks', 'vendorId']);
      
      // System can update impressions and clicks (use Cloud Functions)
      // Admins can approve/reject and pause ads
      allow update: if isAdmin();
      
      // Vendors can delete their own pending ads
      allow delete: if isVendorOwner(resource.data.vendorId) && resource.data.status == 'pending';
      
      // Admins can delete any ad
      allow delete: if isAdmin();
    }
    
    // ============================================
    // CATEGORIES COLLECTION
    // ============================================
    match /categories/{categoryId} {
      // Only admins can create categories
      allow create: if isAdmin() &&
                      request.resource.data.keys().hasAll(['name', 'slug', 'createdAt']);
      
      // Everyone can read categories
      allow read: if true;
      
      // Only admins can update categories
      allow update: if isAdmin();
      
      // Only admins can delete categories
      allow delete: if isAdmin();
    }
    
    // ============================================
    // CART COLLECTION (Optional - for persistent carts)
    // ============================================
    match /carts/{userId} {
      // Users can create their own cart
      allow create: if isOwner(userId);
      
      // Users can only read their own cart
      allow read: if isOwner(userId);
      
      // Users can update their own cart
      allow update: if isOwner(userId);
      
      // Users can delete their own cart
      allow delete: if isOwner(userId);
    }
    
    // ============================================
    // WISHLIST COLLECTION
    // ============================================
    match /wishlists/{wishlistId} {
      // Users can create wishlist items
      allow create: if isSignedIn() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'productId', 'createdAt']);
      
      // Users can only read their own wishlist items
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Users can update their own wishlist items
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Users can delete their own wishlist items
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // NOTIFICATIONS COLLECTION
    // ============================================
    match /notifications/{notificationId} {
      // System creates notifications (use Cloud Functions)
      allow create: if false;
      
      // Users can read their own notifications
      allow read: if isOwner(resource.data.userId);
      
      // Users can mark their notifications as read
      allow update: if isOwner(resource.data.userId) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      
      // Users can delete their own notifications
      allow delete: if isOwner(resource.data.userId);
      
      // Admins can manage all notifications
      allow read, update, delete: if isAdmin();
    }
    
    // ============================================
    // PAYOUTS COLLECTION (Vendor Earnings)
    // ============================================
    match /payouts/{payoutId} {
      // Only system/admins can create payouts
      allow create: if isAdmin();
      
      // Vendors can read their own payouts
      allow read: if isVendorOwner(resource.data.vendorId);
      
      // Admins can read all payouts
      allow read: if isAdmin();
      
      // Only admins can update payout status
      allow update: if isAdmin();
      
      // No one can delete payouts (for audit trail)
      allow delete: if false;
    }
    
    // ============================================
    // PLATFORM SETTINGS COLLECTION
    // ============================================
    match /settings/{settingId} {
      // Everyone can read platform settings (commission rates, etc.)
      allow read: if true;
      
      // Only admins can create/update/delete settings
      allow create, update, delete: if isAdmin();
    }
    
    // ============================================
    // ANALYTICS COLLECTION (Read-only for vendors)
    // ============================================
    match /analytics/{docId} {
      // System creates analytics (use Cloud Functions)
      allow create: if false;
      
      // Vendors can read their own analytics
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all analytics
      allow read: if isAdmin();
      
      // Only system can update (use Cloud Functions with admin SDK)
      allow update: if false;
      
      // No one can delete analytics
      allow delete: if false;
    }
    
    // ============================================
    // ADDRESSES COLLECTION (Shipping Addresses)
    // ============================================
    match /addresses/{addressId} {
      // Users can create their own addresses
      allow create: if isSignedIn() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'fullName', 'phone', 'addressLine1', 'city', 'state', 'country']);
      
      // Users can read their own addresses
      allow read: if isOwner(resource.data.userId);
      
      // Users can update their own addresses
      allow update: if isOwner(resource.data.userId);
      
      // Users can delete their own addresses
      allow delete: if isOwner(resource.data.userId);
      
      // Admins can read all addresses
      allow read: if isAdmin();
    }
    
    // ============================================
    // TRANSACTIONS COLLECTION (Payment Records)
    // ============================================
    match /transactions/{transactionId} {
      // System creates transactions (via API routes with Admin SDK)
      allow create: if false;
      
      // Users can read their own transactions
      allow read: if isOwner(resource.data.userId);
      
      // Vendors can read transactions for their orders
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all transactions
      allow read: if isAdmin();
      
      // Only admins can update transaction status
      allow update: if isAdmin();
      
      // No one can delete transactions (audit trail)
      allow delete: if false;
    }
    
    // ============================================
    // REFUNDS COLLECTION
    // ============================================
    match /refunds/{refundId} {
      // Customers can request refunds for their orders
      allow create: if isCustomer() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'orderId', 'reason', 'status', 'createdAt']) &&
                      request.resource.data.status == 'pending';
      
      // Users can read their own refund requests
      allow read: if isOwner(resource.data.userId);
      
      // Vendors can read refunds for their products
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all refunds
      allow read: if isAdmin();
      
      // Only admins can update refund status
      allow update: if isAdmin();
      
      // No one can delete refunds
      allow delete: if false;
    }
    
    // ============================================
    // MESSAGES COLLECTION (Customer Support Chat)
    // ============================================
    match /messages/{messageId} {
      // Users can send messages
      allow create: if isSignedIn() &&
                      request.resource.data.senderId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['senderId', 'receiverId', 'message', 'createdAt']) &&
                      request.resource.data.message.size() > 0 &&
                      request.resource.data.message.size() <= 1000;
      
      // Users can read messages they sent or received
      allow read: if isOwner(resource.data.senderId) || isOwner(resource.data.receiverId);
      
      // Admins can read all messages
      allow read: if isAdmin();
      
      // Users can update their own messages (mark as read)
      allow update: if isOwner(resource.data.receiverId) &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      
      // Users can delete their own sent messages
      allow delete: if isOwner(resource.data.senderId);
      
      // Admins can delete any message
      allow delete: if isAdmin();
    }
    
    // ============================================
    // REPORTS COLLECTION (Report Abuse)
    // ============================================
    match /reports/{reportId} {
      // Users can report products, vendors, or reviews
      allow create: if isSignedIn() &&
                      request.resource.data.reporterId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['reporterId', 'type', 'targetId', 'reason', 'status', 'createdAt']) &&
                      request.resource.data.type in ['product', 'vendor', 'review', 'user'] &&
                      request.resource.data.status == 'pending';
      
      // Users can read their own reports
      allow read: if isOwner(resource.data.reporterId);
      
      // Admins can read all reports
      allow read: if isAdmin();
      
      // Only admins can update report status
      allow update: if isAdmin();
      
      // No one can delete reports
      allow delete: if false;
    }
    
    // ============================================
    // COUPONS COLLECTION (Discount Codes)
    // ============================================
    match /coupons/{couponId} {
      // Only admins can create coupons
      allow create: if isAdmin() &&
                      request.resource.data.keys().hasAll(['code', 'discount', 'expiresAt', 'status', 'createdAt']);
      
      // Everyone can read active coupons
      allow read: if resource.data.status == 'active' && resource.data.expiresAt > request.time;
      
      // Admins can read all coupons
      allow read: if isAdmin();
      
      // Only admins can update coupons
      allow update: if isAdmin();
      
      // Only admins can delete coupons
      allow delete: if isAdmin();
    }
    
    // ============================================
    // VENDOR APPLICATIONS COLLECTION
    // ============================================
    match /vendor_applications/{applicationId} {
      // Users can apply to become vendors
      allow create: if isCustomer() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'businessName', 'storeName', 'email', 'phone', 'status', 'createdAt']) &&
                      request.resource.data.status == 'pending';
      
      // Applicants can read their own application
      allow read: if isOwner(resource.data.userId);
      
      // Admins can read all applications
      allow read: if isAdmin();
      
      // Only admins can update application status (approve/reject)
      allow update: if isAdmin();
      
      // Applicants can delete their pending applications
      allow delete: if isOwner(resource.data.userId) && resource.data.status == 'pending';
      
      // Admins can delete any application
      allow delete: if isAdmin();
    }
    
    // ============================================
    // AUDIT LOGS COLLECTION (Admin Actions)
    // ============================================
    match /audit_logs/{logId} {
      // System creates audit logs (use Cloud Functions)
      allow create: if false;
      
      // Only admins can read audit logs
      allow read: if isAdmin();
      
      // No one can update or delete audit logs
      allow update, delete: if false;
    }
    
    // ============================================
    // SHIPPING COLLECTION (Delivery Tracking)
    // ============================================
    match /shipping/{shippingId} {
      // System creates shipping records
      allow create: if false;
      
      // Customers can read their own shipping info
      allow read: if isOwner(resource.data.userId);
      
      // Vendors can read shipping for their orders
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all shipping records
      allow read: if isAdmin();
      
      // Vendors can update tracking info
      allow update: if isVerifiedVendor() && 
                      resource.data.vendorId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['trackingNumber', 'carrier', 'status', 'updatedAt']);
      
      // Admins can update any shipping record
      allow update: if isAdmin();
      
      // No one can delete shipping records
      allow delete: if false;
    }
    
    // ============================================
    // ADVERTISERS COLLECTION (New Advertising System)
    // ============================================
    match /advertisers/{advertiserId} {
      // Users can create their own advertiser profile
      allow create: if isSignedIn() &&
                      request.auth.uid == advertiserId &&
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.businessName is string &&
                      request.resource.data.businessEmail is string &&
                      request.resource.data.phone is string &&
                      request.resource.data.businessType is string &&
                      request.resource.data.accountStatus == 'active' &&
                      request.resource.data.accountBalance == 0 &&
                      request.resource.data.totalSpent == 0 &&
                      isValidEmail(request.resource.data.businessEmail);
      
      // Advertisers can read their own profile
      allow read: if isOwner(advertiserId);
      
      // Admins can read all advertiser profiles
      allow read: if isAdmin();
      
      // Advertisers can update their own profile (except balance, totalSpent, and accountStatus)
      allow update: if isOwner(advertiserId) &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'accountBalance', 'totalSpent', 'accountStatus']);
      
      // Only admins can update accountStatus, accountBalance, and totalSpent
      // Note: API routes use Firebase Admin SDK which bypasses these rules
      allow update: if isAdmin();
      
      // Only admins can delete advertiser profiles
      allow delete: if isAdmin();
    }
    
    // ============================================
    // STORE CUSTOMIZATION COLLECTION (Vendor Store Settings)
    // ============================================
    match /storeCustomization/{vendorId} {
      // Vendors can read and write their own store customization
      allow read, write: if isSignedIn() && request.auth.uid == vendorId;
      
      // Anyone can read store customization (for public store pages)
      allow read: if true;
      
      // Admins can read all store customizations
      allow read: if isAdmin();
    }
    
    // ============================================
    // STORE SETTINGS COLLECTION (Business Settings)
    // ============================================
    match /storeSettings/{vendorId} {
      // Vendors can read and write their own store settings
      allow read, write: if isSignedIn() && request.auth.uid == vendorId;
      
      // Admins can read all store settings
      allow read: if isAdmin();
    }
    
    
    // ============================================
    // AD CAMPAIGNS COLLECTION (Advertiser Campaigns)
    // ============================================
    match /adCampaigns/{campaignId} {
      // Advertisers can create campaigns
      allow create: if isSignedIn() &&
                      exists(/databases/$(database)/documents/advertisers/$(request.auth.uid)) &&
                      request.resource.data.advertiserId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['advertiserId', 'campaignName', 'budget', 'bidding', 'creative', 'status', 'createdAt']) &&
                      request.resource.data.budget.total > 0 &&
                      request.resource.data.budget.dailyLimit > 0 &&
                      request.resource.data.bidding.bidAmount > 0 &&
                      request.resource.data.status in ['draft', 'pending_review'];
      
      // Advertisers can read their own campaigns
      allow read: if isSignedIn() && resource.data.advertiserId == request.auth.uid;
      
      // Admins can read all campaigns
      allow read: if isAdmin();
      
      // Advertisers can update their own campaigns (except stats and status if active)
      allow update: if isSignedIn() &&
                      resource.data.advertiserId == request.auth.uid &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['advertiserId', 'stats']) &&
                      (resource.data.status in ['draft', 'paused'] || 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) && 
                       request.resource.data.status == 'paused');
      
      // System can update stats (use Cloud Functions or API with admin SDK)
      // Admins can update any campaign
      allow update: if isAdmin();
      
      // Advertisers can delete their own draft campaigns
      allow delete: if isSignedIn() && 
                      resource.data.advertiserId == request.auth.uid && 
                      resource.data.status == 'draft';
      
      // Admins can delete any campaign
      allow delete: if isAdmin();
    }
    
    // ============================================
    // AD SLOTS COLLECTION (Vendor Ad Spaces)
    // ============================================
    match /adSlots/{slotId} {
      // Vendors can create ad slots for their stores
      allow create: if isVerifiedVendor() &&
                      request.resource.data.vendorId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['vendorId', 'vendorName', 'storeName', 'placement', 'availability', 'pricing', 'isActive', 'createdAt']);
      
      // Everyone can read active ad slots (for ad placement)
      allow read: if resource.data.isActive == true;
      
      // Anyone can query ad slots (for storefront ad display)
      allow read: if true;
      
      // Vendors can read their own slots
      allow read: if isVendorOwner(resource.data.vendorId);
      
      // Admins can read all slots
      allow read: if isAdmin();
      
      // Vendors can update their own slots (except stats)
      allow update: if isVendorOwner(resource.data.vendorId) &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['vendorId', 'stats']);
      
      // System can update stats and rotation queue
      // Admins can update any slot
      allow update: if isAdmin();
      
      // Vendors can delete their own slots
      allow delete: if isVendorOwner(resource.data.vendorId);
      
      // Admins can delete any slot
      allow delete: if isAdmin();
    }
    
    // ============================================
    // AD IMPRESSIONS COLLECTION (Tracking)
    // ============================================
    match /adImpressions/{impressionId} {
      // System creates impressions (via API routes)
      allow create: if false;
      
      // Advertisers can read impressions for their campaigns
      allow read: if isSignedIn() && 
                    exists(/databases/$(database)/documents/advertisers/$(request.auth.uid)) &&
                    resource.data.campaignId in get(/databases/$(database)/documents/advertisers/$(request.auth.uid)).data.campaigns;
      
      // Vendors can read impressions for their slots
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all impressions
      allow read: if isAdmin();
      
      // System can update impressions (mark as clicked/converted)
      allow update: if false;
      
      // No one can delete impressions (audit trail)
      allow delete: if false;
    }
    
    // ============================================
    // AD CLICKS COLLECTION (Click Tracking)
    // ============================================
    match /adClicks/{clickId} {
      // System creates clicks (via API routes)
      allow create: if false;
      
      // Advertisers can read clicks for their campaigns
      allow read: if isSignedIn() && 
                    exists(/databases/$(database)/documents/advertisers/$(request.auth.uid));
      
      // Vendors can read clicks for their slots
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all clicks
      allow read: if isAdmin();
      
      // No one can update or delete clicks (audit trail)
      allow update, delete: if false;
    }
    
    // ============================================
    // VENDOR AD EARNINGS COLLECTION
    // ============================================
    match /vendorAdEarnings/{earningsId} {
      // System creates earnings records
      allow create: if false;
      
      // Vendors can read their own earnings
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all earnings
      allow read: if isAdmin();
      
      // Only admins can update earnings (payout processing)
      allow update: if isAdmin();
      
      // No one can delete earnings records
      allow delete: if false;
    }
    
    // ============================================
    // CONVERSATIONS COLLECTION (Vendor-Customer Messaging)
    // ============================================
    match /conversations/{conversationId} {
      // Customers can create conversations with vendors
      allow create: if isSignedIn() &&
                      request.resource.data.customerId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['vendorId', 'customerId', 'productId', 'status', 'createdAt']);
      
      // Participants can read their conversations
      allow read: if isSignedIn() && 
                    (resource.data.customerId == request.auth.uid || 
                     resource.data.vendorId == request.auth.uid);
      
      // Admins can read all conversations
      allow read: if isAdmin();
      
      // Participants can update conversation (mark as read, close, etc.)
      allow update: if isSignedIn() && 
                      (resource.data.customerId == request.auth.uid || 
                       resource.data.vendorId == request.auth.uid) &&
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['vendorId', 'customerId', 'productId']);
      
      // Admins can update any conversation
      allow update: if isAdmin();
      
      // No one can delete conversations (audit trail)
      allow delete: if false;
      
      // ============================================
      // MESSAGES SUBCOLLECTION
      // ============================================
      match /messages/{messageId} {
        // Conversation participants can create messages
        allow create: if isSignedIn() &&
                        request.resource.data.senderId == request.auth.uid &&
                        (get(/databases/$(database)/documents/conversations/$(conversationId)).data.customerId == request.auth.uid ||
                         get(/databases/$(database)/documents/conversations/$(conversationId)).data.vendorId == request.auth.uid) &&
                        request.resource.data.keys().hasAll(['senderId', 'message', 'createdAt']) &&
                        request.resource.data.message.size() > 0 &&
                        request.resource.data.message.size() <= 2000;
        
        // Conversation participants can read messages
        allow read: if isSignedIn() &&
                      (get(/databases/$(database)/documents/conversations/$(conversationId)).data.customerId == request.auth.uid ||
                       get(/databases/$(database)/documents/conversations/$(conversationId)).data.vendorId == request.auth.uid);
        
        // Admins can read all messages
        allow read: if isAdmin();
        
        // No one can update or delete messages
        allow update, delete: if false;
      }
    }
    
    // ============================================
    // DIGITAL PRODUCTS COLLECTION (Customer Purchases)
    // ============================================
    match /digitalProducts/{digitalProductId} {
      // System creates digital product records after purchase (via API with Admin SDK)
      allow create: if false;
      
      // Customers can read their own digital products
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Vendors can read digital products they sold
      allow read: if isVerifiedVendor() && resource.data.vendorId == request.auth.uid;
      
      // Admins can read all digital products
      allow read: if isAdmin();
      
      // System can update download count and last accessed (via API with Admin SDK)
      allow update: if false;
      
      // No one can delete digital product records (audit trail)
      allow delete: if false;
    }
    
    // ============================================
    // DEFAULT DENY ALL
    // ============================================
    // Deny access to any collection not explicitly defined above
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
    